#!/usr/bin/perl
# SDoc documentation generator | Spencer Tipping
# Licensed under the terms of the MIT source code license

my @args = ();
push @args, shift @ARGV until /^--/ !~ $ARGV[0] or $ARGV[0] eq '--' or not @ARGV;

my ($tags)       = grep s/^--tags=//,                @args;
my ($comment)    = grep s/^--comment=//,             @args;
my  $source_only = grep /^--source-only$/ || /^-s$/, @args;
my  $html_only   = grep /^--html-only$/   || /^-h$/, @args;

$tags ||= 'tags';

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //   cc   //   h    //   java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #    lisp ;;;  lsp  ;;;  s    ;   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;    bas  '    ada  --   asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //   io   //   j    NB.  lua  #   n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","  tcl  #    texi @c   tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --|;

my $generated_string = 'Generated by SDoc';
my $html_script      = 'http://spencertipping.com/sdoc/sdoc.js';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_$e", split /\n/, $text)}
sub escape     {my ($text) = @_; $text =~ s/&/&amp;/go; $text =~ s/</&lt;/go; $text =~ s/>/&gt;/go; $text}

sub paragraphs {map split(/(\n{2,})/, $_), @_}
sub read_file  {open my $fh, '<', $_[0]; my $result = join '', <$fh>; close $fh; $result}
sub write_file {open my $fh, '>', $_[0]; print $fh $_[1]; close $fh}

sub generate_source {
  my ($filename)    = @_;
  my ($extension)   = $filename =~ /\.(\w+)\.sd$/igo;
  my ($new_file)    = $filename =~ /^(.*)\.sd$/igo;
  my ($start, $end) = split /,/o, $comment || $comments_for_extension{lc $extension};

  warn "Not clobbering $new_file" and return if -f $new_file && ! read_file($new_file) =~ /\s$generated_string\s/;
  write_file $new_file, join '', map(is_code($_) || is_blank($_) ? $_ : comment($_, $start, $end), paragraphs read_file $filename), "\n$start $generated_string $end";
}

sub generate_html {
  my ($filename)  = @_;
  my ($original)  = $filename =~ /^(.*)\.sd$/igo;
  my ($extension) = $original =~ /^.*\.(\w+)$/igo;
  (my $new_file = $filename)  =~ s/\.sd$/\.html/io;

  my @pieces = map escape($_), paragraphs read_file $filename;
  my %file_counts;
  my $count;

  my %links;
  my %targets;

  for (grep /^(\S+)\t\s*([^\t]+)\t\s*\/(.*)\//o, split /\n/, read_file $tags) {
    my @line = my ($identifier, $file, $pattern) = map escape($_), $1, $2, $3;
    $links{++$count} = $targets{++$file_counts{$file}} = [@line];

    grep is_code($_) && s/($pattern)/$1<a class="target" id="target-$file_counts{$file}"><\/a>/mg, @pieces;
    grep s/($identifier)/$1<a class="link" id="link-$count"><\/a>/mg, @pieces;
  }

  my $processed_source = join '', @pieces;

  write_file $new_file, qq{<!DOCTYPE html>
                           <!-- $generated_string -->
                           <html lang='en'>
                             <head>
                               <title>$original - SDoc</title>
                               <script src='$html_script'></script>
                               <script src='local.js'></script>
                             </head>
                             <body>
                              $processed_source
                             </body>
                           </html>};
}

my @files = @ARGV ? @ARGV : <*.sd>;
map generate_source($_), @files unless $html_only;
map generate_html  ($_), @files unless $source_only;

__END__

=head1 NAME

sdoc - Simple documentation for lightweight development

=head1 SYNOPSYS

sdoc [options] [file1 [file2 [... fileN]]]

=head1 DESCRIPTION

SDoc is a program and a file format. As a program, SDoc generates both source code and documentation from a source file. It will optionally generate hyperlinked output if it can find a CTags
output file in the current directory. (Alternatively, you can tell it where one is; see the --tags option, below.)

SDoc tries to be useful without any options. By default, it looks for all C<.sd> files in the current directory and unpacks the source code and documentation alongside them. For example,
if you have a file called C<test.java.sd>, then running C<simpledoc> would produce C<test.java> and C<test.java.html>.

=head1 OPTIONS

=over 2

=item B<--tags=file>

Refers SDoc to a CTags file. SDoc then reads this file and creates hyperlinks in the generated HTML document. If there is a C<tags> file in the current directory, SDoc will use
that.

=item B<--comment=/*,*/>

Sets the comment delimiters. Normally these are detected from the file's extension, but they can be set explicitly. All generated comments are line comments; that is, multiline block
comments are never used. To define line comments, leave the second field blank (the comma can also be omitted); for example, C<--comment=//> will define C++-style comments, and C<--comment=#>
defines Perl-style comments.

=item B<-s>, B<--source-only>

Generate the source, but do not generate HTML.

=item B<-h>, B<--html-only>

Generate the HTML, but do not generate the source.

=back

=head1 FILE FORMAT

The SDoc file format is, well, very simple. SDoc first splits the file into paragraphs, where paragraphs are separated by one or more blank lines. It then uses a simple heuristic to
categorize them: documentation paragraphs begin with a capital letter or pipe symbol (|), and code paragraphs begin with anything else. Documentation paragraphs are commented out, and source
paragraphs are left alone. (In the HTML output, code paragraphs are escaped and put into C<< <pre> >> tags while documentation paragraphs are rendered verbatim.)

So, for example, this is a valid SDoc file:

    Header material -- this is all comments.
    This program does something really spiffy. Check out the main() method:

    int main () {
      // This paragraph starts with a lowercase letter, so it is code.
      return 0;
    }

If this program is in a file called C<main.c.sd>, then SDoc will generate the following in a file called C<main.c>:

    /* Header material -- this is all comments. */
    /* This program does something really spiffy. Check out the main() method: */

    int main () {
      // This paragraph starts with a lowercase letter, so it is code.
      return 0;
    }
    /* Generated by SDoc */

The C<Generated by SDoc> line tells SDoc that it's OK to clobber the file's contents. SDoc will refuse to clobber a file without this notice at the end.

It is worth mentioning that SDoc can process regular source files too.

=head1 AUTHOR

Spencer Tipping <spencer@spencertipping.com>

=cut
