#!/usr/bin/perl
# SDoc documentation generator | Spencer Tipping
# Licensed under the terms of the MIT source code license

++$|;

my @args = ();
push @args, shift @ARGV while $ARGV[0] =~ /^--/o and $ARGV[0] ne '--' and @ARGV;

my ($tags) = grep s/^--tags=//o, @args;
my ($script) = grep s/^--js=//o, @args;

$tags   ||= 'tags';
$script ||= $ENV{SDOC_JS_FILE} || 'http://spencertipping.com/sdoc/lib/sdoc.js';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_$e", split /\n/, $text)}
sub escape     {my ($text) = @_; $text =~ s/&/&amp;/go; $text =~ s/</&lt;/go; $text =~ s/>/&gt;/go; $text}

sub paragraphs {map split(/(\n{2,})/, $_), @_}
sub read_file  {open my $fh, '<', $_[0]; my $result = join '', <$fh>; close $fh; $result}
sub write_file {open my $fh, '>', $_[0]; print $fh $_[1]; close $fh}

sub generate_html {
  my ($filename)  = @_;
  my ($original)  = $filename =~ /^(.*)\.sdoc$/igo;
  my ($extension) = $original =~ /^.*\.(\w+)$/igo;
  (my $new_file = $filename)  =~ s/\.sdoc$/\.html/io;

  my @pieces = map escape($_), paragraphs read_file $filename;
  my %file_counts;
  my $count;

  my %links;
  my %targets;

  for (grep /^(\S+)\t\s*([^\t]+)\t\s*\/(.*)\//o, split /\n/, read_file $tags) {
    print my @line = my ($identifier, $file, $pattern) = map escape($_), $1, $2, $3;
    $links{++$count} = $targets{++$file_counts{$file}} = [@line];

    grep is_code($_) && s/($pattern)/$1<a class="target" id="target-$file_counts{$file}"><\/a>/mg, @pieces;
    grep s/($identifier)/$1<a class="link" id="link-$count"><\/a>/mg, @pieces;
  }

  my $processed_source = join '', @pieces;

  write_file $new_file, qq{<!DOCTYPE html>
                           <!-- $generated_string -->
                           <html lang='en'>
                             <head>
                               <title>$original - SDoc</title>
                               <script src='$html_script'></script>
                               <script src='local.js'></script>
                             </head>
                             <body>
                              $processed_source
                             </body>
                           </html>};
}

my @files = @ARGV ? @ARGV : <*.sdoc>;
map generate_source($_), @files unless $html_only;
map generate_html  ($_), @files unless $source_only;

__END__

=head1 NAME

sdoch - Simple documentation - HTML generator

=head1 SYNOPSYS

sdoch [options] [file1 [file2 [... fileN]]]

=head1 DESCRIPTION

SDoc (see L<sdocs(1)> for a more general description, including a discussion of the file format) allows you to easily insert free-form documentation into a source file. sdoch takes such a file
and generates HTML documentation for it, hyperlinking identifiers if a C<tags> file is available. (See the B<--tags> option below.)

=head1 OPTIONS

=over 2

=item B<--tags=file>

Refers SDoc to a CTags file. sdoch then reads this file and creates hyperlinks in the generated HTML document. If there is a C<tags> file in the current directory, sdoch will use that.

=item B<--js=file>

Uses a different JavaScript driver file for the generated HTML. One use for this is to use a local copy (to obviate the need for an active internet connection on the part of whoever's viewing
the docs). To do this across projects, you can set the C<SDOC_JS> environment variable to point to the C<lib/sdoc.js> file included with the SDoc source.

=back

=head1 SEE ALSO

L<sdocs(1)>

=head1 AUTHOR

Spencer Tipping <spencer@spencertipping.com>

=cut
